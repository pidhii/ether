
-- Define a variable
let my_variable = 666 in


-- Lists
print [1, 2, 3] eq 1 :: 2 :: 3 :: []; --> true


-- Equality operators
print (1 == 1); --> true
print (1 != 2); --> true
print ("string" eq "string"); --> true
print ("string" not eq "different string"); --> true
print ([1, [2], 3] eq [1, [2], 3]); --> true
print (true is true); --> true
print (true is not false); --> true


-- Numeric comaprison operators (<, >, <=, >=) can be chained together
let other_variable = 228 in
print (other_variable < my_variable is not false); --> true


-- Function
let fn square x = x * x in
print (square 2);


-- Recursive function
let rec fn factorial x =
  if x <= 1 then 1
  else x * factorial (x - 1)
in

print (factorial 3);


-- Multiple cross-referencing functions
let rec fn even? x =
  x == 0 || odd? (x - 1)
and fn odd? x =
  x != 0 && even? (x - 1)
in

print (even? 42);


-- Better way to write factorial: tail-recursion
let rec fn factorial2 x acc =
  if x <= 1 then acc
  else factorial2 (x - 1) (acc * x)
in


print (factorial2 1000000 1);


-- Exception handling
try factorial 1000000
except `stack_overflow -> print "Stack overflow";


-- Currying
let fn add x y = x + y in
let increment = add 1 in
print (increment 3);


-- Higher order functions
let rec fn map f xs =
  if let x :: xs' = xs then
    f x :: map f xs'
  else []
in

print (map increment [1, 2, 3]);


-- Closures/lambda functions
print (map (fn x -> x^2) [1, 2, 3]);


-- Pattern matching
let x :: xs = [1, 2, 3] in
print (x, xs);


-- ...
let fn safe_div x y =
  if y != 0 then some (x / y) else false
in
let some x = safe_div 1 2 in
print x;


-- Tuples
let (a, b) = (`a, `b) in
print (a, b); --> `a     `b


-- Records (a.k.a. structs)
let info = {name = "Jill", login = "Mikle Jackson"} in
let {login} = info in
print login; --> Mikle Jackson
print (info.login eq login); --> true


-- FizzBuzz
--
-- `|>` is a "pipe"-operator from OCaml: `x |> f` is equivalent to `f x`
-- `()` is a synonim for `nil`.
let {*} = import 'list' in
range (1 .. 100) |> iter (fn i ->
  if i mod 3 == 0 then print "FIZZ"
  else if i mod 5 == 0 then print "BUZZ"
  else print i
)

