
-- Simple function
let square x = x * x
print (square 2)


-- Recursive function
let rec factorial x =
  if x <= 1 then 1
  else x * factorial (x - 1)

print (factorial 3)


-- Multiple cross-referencing functions
let rec even? x =
  x == 0 || odd? (x - 1)
and odd? x =
  x /= 0 && even? (x - 1)

print (even? 42)


-- Better way to write factorial: tail-recursion
let rec factorial2 x acc =
  if x <= 1 then acc
  else factorial2 (x - 1) (acc * x)

print (factorial2 1000000 1)


-- Exception handling
try factorial 1000000
with `stack_overflow -> print "Stack overflow"


-- Currying
let add x y = x + y
let increment = add 1
print (increment 3)


-- Lists
print ([1, 2, 3] eq 1 :: 2 :: 3 :: [])


-- Pattern matching
let x :: xs = [1, 2, 3]
print (x, xs)


-- Higher order functions
let rec map f xs =
  if let x :: xs' = xs then
    f x :: map f xs'
  else []

print (map increment [1, 2, 3])


-- Closures
print (map (x -> x^2) [1, 2, 3])


-- Tuples
let (a, b) = (`a, `b)
print (a, b)


-- Records
let { login } = { name = "Jill", login = "Mikle Jackson" }
print login


-- Variants (tagged wrapper-types)
let safe_div x y = `some (x / y) if y /= 0 else false
let `some x = safe_div 1 2
print x


-- FizzBuzz
--
-- `|>` is a "pipe"-operator from OCaml: `x |> f` is equivalent to `f x`
-- `()` is a synonim for `nil`.
let list = @(require "list")
[1 .. 100] |> list.iter $ i ->
  if i mod 3 == 0 then print "FIZZ"
  else if i mod 5 == 0 then print "BUZZ"
  else print i

