#!/bin/env ether

(* Get direcory containing modules *)
let module_path =
  let pipe = open_pipe_in "ether --prefix" in
  let line = read_line_of pipe in
  if close pipe /= 0 then
    raise Failed_to_resolve_prefix
  else format "~d/lib/ether" (String.chop line)
in

(* Checks whether a file exists in the file system *)
let exist? path =
  try Os.(access path f_ok)
  with System_error ENOENT -> false
in

let mkdir path =
  unless system "mkdir -vp '~d'" path == 0 then
    raise System_error;
in

let copy_file src dst =
  open_in src |> read_file |> write_to (open_out dst)
in

let create_symlink src dst =
  unless system "ln -vs '~d' '~d'" src dst == 0 then
    raise System_error;
in

let unlink path =
  unless system "rm -rfv ~d" path == 0 then
    raise System_error;
in

let utc_date! =
  let pipe = open_pipe_in "date -u +'%x %X'" in
  let line = read_line_of pipe in
  if close pipe /= 0 then raise System_error
  else String.chop line
in

let realpath path =
  let pipe = open_pipe_in (format "realpath '~d'" path) in
  let line = read_line_of pipe in
  if close pipe /= 0 then raise System_error
  else String.chop line
in

let db_path = format "~d/__db.eth" module_path in

(* Get registry of installed modules *)
let load_db! = first $ load db_path if exist? db_path else [] in

(* Get module record *)
let get_module name db =
  List.find (fn {name = name'} -> String.casecmp name name' == 0) db;
in

let update_db db =
  let dbfile = open_out db_path in
  write_to dbfile (format "~w\n" db);
in

let do_in dir thunk =
  let cwd = Os.getcwd! in
  Os.chdir dir;
  thunk!;
  Os.chdir cwd;
in


let install dir =
  let (_, conf) =
    try load (format "~d/install.eth" dir)
    with _ -> begin
      eprintf "> error: failed to load install-script\n";
      raise Failure;
    end
  in
  let Some name = List.assoc "name" conf in
  let Some files = Maybe.(List.assoc "files" conf || Some []) in
  let Some main = List.assoc "main" conf in

  let db = load_db! in

  (* Check if module name is unique *)
  when get_module name db then begin
    eprintf "> error: module already present\n";
    raise Failure;
  end;

  (* Build *)
  when let Some build = List.assoc "build" conf then do_in dir (fn ->
    printf "> building module ~d\n" name;
    build!;
  );

  printf "> installing module ~d\n" name;

  (* Create separate direcory for new module *)
  let moddir = module_path ++ "/" ++ name in
  mkdir moddir;

  (* Copy module sources *)
  List.iter (fn file ->
    copy_file (dir ++ "/" ++ file) (moddir ++ "/" ++ file)
  ) (main :: files);

  (* Create symlink to main *)
  let mainpath = moddir ++ "/__main__.eth" in
  unless exist? mainpath then
    create_symlink (moddir ++ "/" ++ main) mainpath;

  (* Update registry *)
  printf "> updating registry\n";
  let date = utc_date! or "<undefined>" in
  let source_dir = realpath dir or "<undefined>" in
  let install_dir = realpath moddir or "<undefined>" in
  let db = {name, date, source_dir, install_dir} :: db in
  update_db db;

  when let Some post_install = List.assoc "post_install" conf then
    do_in dir (fn ->
      printf "> running post-install hooks\n";
      post_install!;
    );
in


let uninstall name =
  let db = load_db! in

  if let Some {install_dir} = get_module name db then begin
    (* Remove module directory *)
    printf "> uninstalling module '~d'\n" name;
    unlink install_dir;
    (* Update registry *)
    printf "> updating registry\n";
    let db = List.remove (fn {name = name'} -> String.casecmp name' name == 0) db in
    update_db db;
  end else begin
    eprintf "> error: no such module\n";
    raise Failure;
  end
in


let reinstall dir =
  let (_, conf) =
    try load (format "~d/install.eth" dir)
    with Failure ->
      eprintf "> error: failed to load install-script\n";
      raise Failure;
  in
  let Some name = List.assoc "name" conf in
  uninstall name;
  install dir;
in


let list_modules! =
  let db = load_db! in
  if db is [] then
    printf "> no installed modules\n"
  else
    let f isfirst {name, date, source_dir, install_dir} =
      unless isfirst then newline!;
      printf "\e[4mname\e[0m: ~d\n" name;
      printf "\e[4msource_dir\e[0m: ~d\n" source_dir;
      printf "\e[4minstall_dir\e[0m: ~d\n" install_dir;
      printf "\e[4mdate\e[0m: ~d\n" date;
      false;
    in List.fold_left f true db
in


let basename path =
  let [_, tail] = String.match \\/?([^\/]+)$/ path in
  tail
in

let help! =
  printf "usage: ~d [OPTIONS]\n" (basename $ car command_line);
  print "";
  print "OPTIONS:";
  print "  --help       -h          Show this message.";
  print "  --install    -i  <dir>   Install package.";
  print "  --uninstall  -u  <name>  Uninstall package.";
  print "  --reinstall  -r  <dir>   Reinstall package.";
  print "  --list       -l          List installed packages.";
in


(******************************** Main ****************************************)
let options =
  [
    (* Long options *)
    {name = "help"     , val = "h", has_arg = false},
    {name = "install"  , val = "i", has_arg = true },
    {name = "uninstall", val = "u", has_arg = true },
    {name = "reinstall", val = "r", has_arg = true },
    {name = "list"     , val = "l", has_arg = false},
    (* Short options *)
    {name = "h", val = "h", has_arg = false},
    {name = "i", val = "i", has_arg = true },
    {name = "u", val = "u", has_arg = true },
    {name = "r", val = "r", has_arg = true },
    {name = "l", val = "l", has_arg = false},
  ]
in

let (opts, _) =
  try CmdArg.get options (cdr command_line)
  with e ->
    if e is Undefined_option then
      eprintf "> error: undefined command-line option\n";
    else if e is Unexpected_argument then
      eprintf "> error: unexpected command-line option argument\n";
    else if e is Missing_argument then
      eprintf "> error: missing argument for command-line option\n";
    else
      eprintf "> error while parsing command-line options\n";
    exit 1;
in

List.iter (fn (opt, arg) ->
  try
    help!         if opt eq "h" else
    install arg   if opt eq "i" else
    uninstall arg if opt eq "u" else
    reinstall arg if opt eq "r" else
    list_modules! if opt eq "l" else ()
  with e ->
    eprintf "> failure\n";
    exit 1;
) opts;

()

