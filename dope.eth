#!/bin/env ether

import Options in
import Os in

(* Get direcory containing modules *)
let module_path =
  let pipe = open_pipe_in "ether --prefix" in
  let line = read_line_of pipe in
  if close pipe /= 0 then
    raise Failed_to_resolve_prefix
  else format "~d/lib/ether" (chomp line)
in

(* Checks whether a file exists in the file system *)
let exist? path =
  try Os.(access path f_ok)
  with System_error ENOENT -> false
in

let mkdir path =
  unless system "mkdir -vp '~d'" path == 0 then
    raise System_error;
in

let copy_file src dst =
  unless system "cp -v '~d' '~d'" src dst == 0 then
    raise System_error;
in

let create_symlink src dst =
  unless system "ln -vs '~d' '~d'" src dst == 0 then
    raise System_error;
in

let unlink path =
  unless system "rm -rfv ~d" path == 0 then
    raise System_error;
in

let utc_date! =
  let pipe = open_pipe_in "date -u +'%x %X'" in
  let line = read_line_of pipe in
  if close pipe /= 0 then System_error
  else chomp line
in

let realpath path =
  let pipe = open_pipe_in "realpath '~d'" path in
  let line = read_line_of pipe in
  if close pipe /= 0 then System_error
  else chomp line
in

let db_path = format "~d/__db.eth" module_path in

(* Get registry of installed modules *)
let load_db! = first $ load db_path if exist? db_path else [] in

(* Get module record *)
let get_module name db =
  find (fn {name = name'} -> strcasecmp name name' == 0) db;
in

let update_db db =
  let dbfile = open_out db_path in
  write_to dbfile (format "~w\n" db);
in

let do_in dir thunk =
  let cwd = Os.getcwd! in
  Os.chdir dir;
  thunk!;
  Os.chdir cwd;
in


let install dir =
  let (_, conf) =
    try load (format "~d/install.eth" dir)
    with _ -> (
      eprintf "> error: failed to load install-script\n";
      raise Failure;
    )
  in
  let Some name = assoc "name" conf in
  let Some files = Maybe.(assoc "files" conf || Some []) in
  let Some main = assoc "main" conf in

  let db = load_db! in

  (* Check if module name is unique *)
  when get_module name db then (
    eprintf "> error: module already present\n";
    raise Failure;
  );

  (* Build *)
  when let Some build = assoc "build" conf then do_in dir (fn ->
    printf "> building module ~d\n" name;
    build!;
  );

  printf "> installing module ~d\n" name;

  (* Create separate direcory for new module *)
  let moddir = module_path ++ "/" ++ name in
  mkdir moddir;

  (* Copy module sources *)
  for_each (main :: files) (fn file ->
    copy_file (dir ++ "/" ++ file) (moddir ++ "/" ++ file)
  );

  (* Create symlink to main *)
  let mainpath = moddir ++ "/__main__.eth" in
  unless exist? mainpath then
    create_symlink (moddir ++ "/" ++ main) mainpath;

  (* Update registry *)
  printf "> updating registry\n";
  let date = utc_date! or "<undefined>" in
  let source_dir = realpath dir or "<undefined>" in
  let install_dir = realpath moddir or "<undefined>" in
  let db = {name, date, source_dir, install_dir} :: db in
  update_db db;

  when let Some post_install = assoc "post_install" conf then do_in dir (fn ->
    printf "> running post-install hooks\n";
    post_install!;
  );
in


let uninstall name =
  let db = load_db! in

  if let Some {install_dir} = get_module name db then (
    (* Remove module directory *)
    printf "> uninstalling module '~d'\n" name;
    unlink install_dir;
    (* Update registry *)
    printf "> updating registry\n";
    let db = remove (fn {name = name'} -> strcasecmp name' name == 0) db in
    update_db db;

  ) else (
    eprintf "> error: no such module\n";
    raise Failure;
  )
in


let reinstall dir =
  let (_, conf) =
    try load (format "~d/install.eth" dir)
    with Failure -> (
      eprintf "> error: failed to load install-script\n";
      raise Failure;
    )
  in
  let Some name = assoc "name" conf in
  uninstall name;
  install dir;
in


let list_modules! =
  let db = load_db! in
  if db is [] then
    printf "> no installed modules\n"
  else
    let f isfirst {name, date, source_dir, install_dir} =
      unless isfirst then newline!;
      printf "\e[4mname\e[0m: ~d\n" name;
      printf "\e[4msource_dir\e[0m: ~d\n" source_dir;
      printf "\e[4minstall_dir\e[0m: ~d\n" install_dir;
      printf "\e[4mdate\e[0m: ~d\n" date;
      false;
    in fold_left f true db
in


(******************************** Main ****************************************)
let options = [
  (* Long options *)
  {name = "install"  , val = "i", has_arg = true},
  {name = "uninstall", val = "u", has_arg = true},
  {name = "reinstall", val = "r", has_arg = true},
  {name = "list"     , val = "l", has_arg = false},
  (* Short options *)
  {name = "i", val = "i", has_arg = true},
  {name = "u", val = "u", has_arg = true},
  {name = "r", val = "r", has_arg = true},
  {name = "l", val = "l", has_arg = false}
]
in

let (opts, _) =
  try Options.get options (cdr command_line)
  with e -> (
    eprintf "> error: i didn't get what do you want\n";
    exit 1;
  )
in

for_each opts (fn (opt, arg) ->
  try
    if opt eq "i" then install arg else
    if opt eq "u" then uninstall arg else
    if opt eq "r" then reinstall arg else
    if opt eq "l" then list_modules! else ()
  with Failure -> (
    eprintf "> failure\n";
    #exit 1;
  )
);

()

