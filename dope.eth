#!/bin/env ether

open 'list'
open 'string'
open 'io'
open 'os'
import 'vector'
import 'json'
import 'cmdarg'

-------------------------[ Log and text formatting ]----------------------------
let paint text =
  "\e[48;5;232;38;5;231m{text}\e[0m"

let info msg =
  print $ paint " {msg} "

let error msg =
  eprint "\e[48;5;196;38;5;232;1;7merror\e[0m\e[48;5;232;38;5;231m:{paint " {msg} "}"

let fatal_error msg =
  error msg
  exit 1

--------------------------------[ Utilities ]-----------------------------------
-- Get direcory containing modules
let module_path =
  let pipe = open_pipe_in "ether --prefix"
  let prefix = read_line_of pipe |> chomp
  if close pipe /= 0
  then raise `failed_to_resolve_prefix
  else prefix ++ "/lib/ether"

-- Checks whether a file exists in the file system
let exist? path =
  try access path f_ok
  with `system_error `ENOENT -> false

let mkdir path =
  unless system "mkdir -vp '{path}'" == 0
  then raise `system_error

let copy src dst =
  unless system "cp -rv '{src}' '{dst}'" == 0
  then raise `system_error

let create_symlink src dst =
  unless system "ln -vs '{src}' '{dst}'" == 0
  then raise `system_error

let unlink path =
  unless system "rm -rfv '{path}'" == 0
  then raise `system_error

let unlink_quite path =
  unless system "rm -rf '{path}'" == 0
  then raise `system_error

let utc_date! =
  let pipe = open_pipe_in "date -u +'%x %X'"
  let line = read_line_of pipe
  if close pipe /= 0
  then raise `system_error
  else chomp line

let elf? path = read_of (open_in path) 4 eq "\x7fELF"

let do_in dir thunk =
  let cwd = getcwd!
  chdir dir
  try
    thunk!
  with e ->
    chdir cwd
    raise e
  chdir cwd

let do_in_tempdir thunk =
  let cwd = getcwd!

  let tempdir = mkdtemp "/tmp/dope-XXXXXX"
  chdir tempdir
  let cleanup! =
    unlink_quite tempdir
    chdir cwd

  let thunk_result = try thunk! with e -> cleanup!; raise e
  cleanup!
  thunk_result


let rec confirm? x =
  if let (prompt1, prompt2) = x then
    do loop ans:(input prompt1) =
      if ans =~ \[Yy](es)?/ then true
      else if ans =~ \[Nn]o?/ then false
      else loop (input prompt2)
  else
    confirm? (x, paint " try again (yes/no): ")

let check_network! =
  shell 'ping -c 1 www.google.com &>/dev/null' or false

let require_network! =
  unless check_network! then
    error "no network connection"
    raise `failure


--------------------------------[ Algorithms ]-----------------------------------
-- Levenshtein distance of strings
let fuzzy_cmp a b =
  let {*} = @(require 'math')
  -- Will memorize sub-distances.
  let lena = strlen a
  let lenb = strlen b
  let mem = vector.init (lena * lenb) (const false)
  let getmem i j mem = vector.get mem (i-1 + lena * (j-1))
  let setmem i j x mem = vector.insert mem (i-1 + lena * (j-1)) x
  -- Indicator function.
  let ind i j = 0 if substr (i-1, 1) a eq substr (j-1, 1) b else 1
  -- Levenshtein distance function.
  let rec distance i j mem =
    if min i j == 0 then
      (max i j, mem)
    else
      let dist = getmem i j mem
      if dist then
        -- Already computed.
        (dist, mem)
      else
        -- Honestly compute it.
        let dist, mem =
          let dist1, mem = distance (i-1) j mem
          let dist2, mem = distance i (j-1) mem
          let dist3, mem = distance (i-1) (j-1) mem
          --(reduce_left min [dist1 + 1, dist2 + 1, dist3 + ind i j], mem) -- original
          (reduce_left min [dist1, dist2, dist3 + ind i j - 1], mem) -- mine
        (dist, setmem i j dist mem)
  -- Compute distance.
  first $ distance lena lenb mem


--------------------------------[ Database ]------------------------------------
let default_db_path = module_path ++ "/__db.eth"

let load_db_from path =
  let mut modlist = first (load path) if exist? path else []
  { get_modlist = fn _ -> modlist
  , get_path = fn _ -> path
  , get_module_opt = fn _ name ->
      find_opt ({name = name'} -> strcasecmp name name' == 0) modlist
  , remove = fn _ name ->
      modlist := remove ({name = name'} -> strcasecmp name' name == 0) modlist
  , add = fn _ entry -> modlist := entry :: modlist
  , update = fn _ ->
      let dbfile = open_out path
      write_to dbfile (format "%w\n" modlist)
  }

---------------------------------[ Git-API ]------------------------------------
let git =
  let repository? url =
    require_network! unless exist? url
    system "git ls-remote -h '{url}' &>/dev/null" == 0

  let list_versions url =
    require_network! unless exist? url
    let refs = shell "git ls-remote -t '{url}'"
    if refs eq ""
    then []
    else
      refs
      |> split \\n/
      |> map $ line -> line =~ \refs\/tags\/(.+)/
      -- Decode version-tags into major, minor and a patch.
      |> rev_filter_map $ tag ->
        if let _ :: version = match \([0-9]+)\.([0-9]+)\.([0-9]+)/ tag then
          (tag, map to_number version)
        else raise `filter_out
      -- Sort versions.
      |> sort $ (_, a) (_, b) ->
        do loop xs:a ys:b =
          when let x :: xs' = xs then
            when let y :: ys' = ys then
              return if x > y then true else x == y && loop xs' ys'
          true
      |> map first

  let head_commit url =
    require_network! unless exist? url
    let line = shell "git ls-remote -h '{url}'"
    let commit = line =~ \^([0-9a-z]+)\s/
    commit

  let clone {url, dir, version} =
    require_network! unless exist? url
    unless system "git clone --progress '{url}' '{dir}'" == 0
    then raise $ `git_failure "git clone failed"
    let dir = realpath dir

    let checkout what =
      unless system "cd {dir}; git checkout {what}" == 0
      then raise $ `git_failure "checkout failed"

    if let `commit commit = version then
      unless shell "cd {dir}; git rev-parse HEAD" eq commit
      then checkout commit
    else
      let `tag tag = version
      unless shell "cd {dir}; git describe --tags" eq tag
      then checkout tag

  {repository?, list_versions, head_commit, clone}

--------------------------------[ GitHub-API ]----------------------------------
let search_repositories tgt_name =
  require_network!
  let {items} =
    shell "curl -s 'https://api.github.com/search/repositories?q={tgt_name}'"
    |> json.parse
  -- Remove items with name mismatch
  items |> filter $ {name} -> name eq tgt_name

-----------------------------------[ Misc ]-------------------------------------
let load_config dir args =
  let _, conf =
    try
      let env = create_env [("command_line", args), ("root", dir)]
      env:load (dir ++ "/install.eth")
    with _ ->
      error "failed to load install-script"
      raise `failure
  { name = assoc "name" conf
  , files = assoc "files" conf or []
  , main = assoc "main" conf
  , build = assoc_opt "build" conf
  , post_install = assoc_opt "post_install" conf
  }

let empty_db_entry = {
  name = nil,
  date = nil,
  install_dir = nil,
  repository = nil,
  version = nil,
}

let uninstall {db, modname} =
  print "... uninstalling ..."
  if let `some {install_dir} = db:get_module_opt modname then
    -- Remove module directory
    info "uninstalling module '{modname}'"
    unlink install_dir
    -- Update registry
    info "updating registry"
    db:remove modname
    db:update
  else
    error "no such module"
    raise `failure

let build_and_install {conf, modentry, db, dir, args, overwrite} =
  let {name, files, main, build, post_install} = conf

  -- Check if module name is unique
  when db:get_module_opt name then
    if overwrite then
      info "module already present"
      uninstall {db, modname=name}
      info "old version of '{name}' was removed"
    else
      error "module already present (will not overwrite)"
      raise `failure

  -- Build (if build-hook is speciefied)
  when let `some build = build then do_in dir $ fn ->
    info "building module {name}"
    build!

  -- Start installation
  info "installing module {name}"
  -- Create separate direcory for new module
  let moddir = module_path ++ "/" ++ name
  mkdir moddir
  -- Copy module sources
  main::files |> iter $ file ->
    copy (dir ++ "/" ++ file) (moddir ++ "/" ++ file)

  info "module is ready for use"

  -- Create symlink to main
  let mainext = ".so" if elf? (dir ++ "/" ++ main) else ".eth"
  let mainpath = moddir ++ "/__main__" ++ mainext
  unless exist? mainpath then
    create_symlink (moddir ++ "/" ++ main) mainpath

  when let `some post_install = post_install then do_in dir $ fn ->
    info "running post-install hooks"
    post_install!

  {
    modentry with name,
    date = utc_date! or "<undefined>",
    install_dir = realpath moddir or "<undefined>",
  }

let fetch {repo_url, version} =
  let repo_dir = "repo_dir"
  try git.clone {url = repo_url, dir = repo_dir, version}
  with `git_failure what -> fatal_error what
  repo_dir

-- Clone repository to a temporary directory. There we will build it and
-- probably install.
let install {db, repo_url, version, args, overwrite} =
  do_in_tempdir $ fn ->
    info "fetching '{repo_url}' ({version})"
    let repo_dir = fetch {repo_url, version}
    info "installing {version}"
    let conf = load_config repo_dir args
    let modentry = {empty_db_entry with repository = repo_url, version}
    build_and_install {modentry, conf, db, dir = repo_dir, args, overwrite}


let check_update {name, local_version, repo_url} =
  require_network! unless exist? repo_url
  let remote_versions = git.list_versions repo_url
  if remote_versions is not [] then
    if let `tag local_version_tag = local_version then
      when local_version_tag not eq car remote_versions then
        { new_version = `tag (car remote_versions)
        , info_mesg =
            "new version of \e[1m{name}\e[22m is available: {car remote_versions}"
        }
    else
      { new_version = `tag (car remote_versions)
      , info_mesg = "release of \e[1m{name}\e[22m is now avaialble"
      }
  else -- remote_versions is []
    let `commit local_commit = local_version
    let remote_head = git.head_commit repo_url
    when local_commit not eq remote_head then
      { new_version = `commit remote_head
      , info_mesg = "new commit of \e[1m{name}\e[22m is available: {remote_head}"
      }



let list_modules! =
  let db = (load_db_from default_db_path):get_modlist
  if db is [] then
    info "no installed modules"
  else
    let f isfirst modentry =
      print "" unless isfirst
      let { name } = modentry
      --info "module \e[1m{name}\e[21m:"
      info "module \e[1m{name}:"
      list modentry
      |> filter $ (k, _) -> k not eq "name"
      |> iter $ (k, v) ->
        info "- \e[4m{k}\e[24m: {v}"
      false
    fold_left f true db


let basename path =
  path =~ \\/?([^\/]+)$/

let help! =
  print "\e[1mUSAGE:\e[0m"
  print "  {basename (car command_line)} COMMAND [OPTIONS]"
  print ""
  print "\e[1mCOMMANDS:\e[0m"
  print "  help      h                Show this message."
  print "  install   i   <dir>        Install package."
  print "  uninstall rm  <name>       Uninstall package."
  print "  list      ls               List installed packages."
  print "  check-updates              Check installed modules for updates."
  print "  update [<name> <args>...]  Update module.'"
  print ""
  print "  Furethermore, each command may contain additional options. For  instance  one"
  print "  can check --help for any command to, probably, find out more."

let help_help! =
  print "\e[1mUSAGE:\e[0m"
  print "  {basename (car command_line)} help [OPTIONS]"
  print ""
  print "\e[1mOPTIONS:\e[0m"
  print "  --help   -h             Show this message."
  print$"  --dev                   Show help for the library developper. It will display\n" ++
        "                          information about installation procedure and  how  to\n" ++
        "                          set up your library so that  it  could  be  installed\n" ++
        "                          with this script."

let help_dev! =
  let text = {TEXT|
In  order to  make library  installable  by the  Dope  it may  be supplied  with
appropriate steering  which will contain  information on all files  required for
the library dependencies, entry point, and routines responsible for building the
library.

Libraries are installed in the directory:

  |TEXT} ++ module_path ++ {TEXT|/<lib-name>

where the first part of the path is obtained a "<ether-prefix>/lib/ether" (check
\`$ ether --prefx\`). And template tree of the directory <lib-name> is:

                <lib-name>
                ├── __main__.[eth|so] -> <entry-point>
                ├── <entry-point>
                ├── ... all other files specified in steering

Sterring is  to be provided  via a script "<lib-root>/install.eth".  It provides
configuration via a  public variables. Following is the list  of variables to be
provided:

  - \e[4mname\e[0m: String with the name of the library. In order to make the name  flexi-
    ble wrt. capital letters this value should be written in lower-case.  If  it
    contains upper-case characters then only exact  match  of  names will work.

  - \e[4mmain\e[0m: Path to the entry point to the library. May be either a script wriiten
    in Ether, or a shared library.

  - \e[4mfiles\e[0m (optional): Listh with pathes to all the other supplementary files re-
    quired by the library. All these files will be copied  to  the  installation
    root (directory previously referenced with <lib-name>).

  - \e[4mbuild\e[0m (optional): Function  of zero  arguments to be called to  build  (i.e.
    compile) the library.

  - \e[4mpost_install\e[0m (optional): Function of zero arguments to be called to clean up
    after the installation.  E.g. one may remove all object files  and  compiled
    library itself.

Installation script will  be evaluated within the root directory  of the library
(the one passed  to the Dope). Command-line arguments provided  by the user will
be available via the \`command_line\`-variable; and  the root directory -- via the
\`root\`-variable.
|TEXT}
  system "LESS=-FX /usr/bin/less -R <<TEXT{text}TEXT"

let install_help! =
  print "\e[1mUSAGE:\e[0m"
  print "  {basename (car command_line)} install [OPTIONS] [<command_line> ...]"
  print ""
  print "\e[1mOPTIONS:\e[0m"
  print "  --latest                Install the latest commit ignoring release versions."
  print "  --help   -h             Show this message."


let sub_command = { keys = [], handle = _ -> die "wtf" }


--------------------------------- Main -----------------------------------------
when len command_line < 2 then
  help!
  exit 1

let dopepath :: cmd :: command_line = id command_line

let commands =
  [
    {
      keys = ['help', 'h'],
      handle = command_line ->
        let options =
          [
            { name = "dev", val = "dev", has_arg = false },
            { name = "help", val = "help", has_arg = false },
            { name = "h", val = "help", has_arg = false }
          ]
        let opts, _ = cmdarg.get options command_line

        if assoc_opt "help" opts then help_help!
        else if assoc_opt "dev" opts then help_dev!
        else help!
    },
    {
      keys = ['list', 'ls', 'l'],
      handle = command_line ->
        list_modules!
    },
    {
      keys = ['install', 'i'],
      handle = command_line ->
        let options =
          [
            { name = ["h", "help"], val = "help", has_arg = false },
            { name = "latest", val = "latest", has_arg = false },
          ]
        let opts, args = cmdarg.get options command_line

        if assoc_opt "help" opts then
          install_help!
        else
          -- - - - - - - - - - - - - - - - - - - - --
          -- Install module from a git repository  --
          -- - - - - - - - - - - - - - - - - - - - --
          if let url :: modargs = args then
            let repo_url =
              -- URL may be a local path. In this case we need it to be a full path
              -- to be able to clone from the temporary directory.
              if exist? url then realpath url else
                -- Resolve repository path.
                if git.repository? url then url else
                  -- Not a valied URL. Search on GitHub.
                  let github_matches =
                    try search_repositories url
                    with _ -> fatal_error "\"{url}\" is not a git repository"

                  if let [github_repo] = github_matches then
                    -- Single match! Perfect!
                    info "found GitHub repository: {github_repo.full_name}"
                    github_repo.clone_url
                  else if github_matches is [] then
                    -- No matches
                    fatal_error "\"{url}\" is not a git repository"
                  else
                    -- Multiple matches. Have to select only a single one of these.
                    info "multiple repositories match the name, select one to install:"
                    do_in_tempdir $ fn ->
                      let tmp = open_out "list"
                      github_matches |> iter $ github_repo ->
                        write_to tmp github_repo.full_name

                      let ans = shell {sh|
                        select x in $(cat list) Cancel;
                        do test -n "$x" && break; done
                        echo $x
                      |sh}
                      if ans eq "" || ans eq "Cancel"
                      then info "exiting then"; exit 0
                      else (find (x -> x:full_name eq ans) github_matches).clone_url

            -- Figure out a version of the module to use. If version-tags
            -- available will install the latest version. Otherwize, use latest
            -- commit in the repository.
            let version =
              if assoc_opt "latest" opts then
                `commit (git.head_commit repo_url)
              else
                let versions = git.list_versions repo_url or []
                if versions is [] then
                  -- No releases available. Try to install from the latest commit
                  -- if user accepts it.
                  info "module does not have any releases"
                  if confirm? (paint " install from the latest commit (yes/no): ")
                  then `commit (git.head_commit repo_url)
                  else info "exiting then"; exit 0
                else
                  -- Will use latest version. Check if current commit corresponds to
                  -- the latest version, if not - checkout desired commit.
                  info "available versions of the module: {versions}"
                  let latest_tag = car versions
                  info "latest: {latest_tag}"
                  `tag latest_tag

            -- Install
            let db = load_db_from default_db_path
            let modentry = install {
              db, repo_url, version, args = modargs, overwrite = true
            }

            -- Update registry
            info "updating registry"
            db:add modentry
            db:update

          else -- let url :: modargs = agrs
            error "missing module-directory path"
            info "see `{basename dopepath} install --help`"
            exit 1
    },
    {
      keys = ['uninstall', 'rm'],
      handle = command_line ->
        let options = [
            { name = "help", val = "help", has_arg = false },
            { name = "h", val = "help", has_arg = false }
          ]
        let opts, args = cmdarg.get options command_line

        if assoc_opt "help" opts then
          die "unimplemented"
        else
          let [modname] = args
          uninstall {modname, db = load_db_from default_db_path}
    },
    {
      keys = ['check-updates'],
      handle = command_line ->
        let db = (load_db_from default_db_path):get_modlist
        let cnt =
          fold_left (cnt { name, version = local_version, repository = repo_url } ->
            write_to stdout $ paint " checking \e[1m{name}\e[22m ... "
            flush stdout
            if let {info_mesg} = check_update {name, local_version, repo_url}
            then write_to stdout "\e[2K\r"; info info_mesg; cnt + 1
            else write_to stdout "\e[2K\r"; cnt
          ) 0 db
        when cnt == 0 then info "no updates available, all modules are up to date"
    },
    {
      keys = ['update'],
      handle = command_line ->
        let options = [
          { name = "help", val = "help", has_arg = false },
          { name = "h", val = "help", has_arg = false },
        ]
        let opts, args = cmdarg.get options command_line
        if assoc_opt "help" opts then
          die "unimplemented"
        else if args eq [] then
          -- Update all modules.
          (load_db_from default_db_path):get_modlist |> iter $ {
            name, version = local_version, repository = repo_url
          } ->
            write_to stdout $ paint " checking \e[1m{name}\e[22m ... "
            flush stdout
            if let {new_version, info_mesg} =
              check_update {name, local_version, repo_url}
            then
              write_to stdout "\e[2K\r"; info info_mesg
              -- Install
              let db = load_db_from default_db_path
              let modentry = install {
                db, repo_url, version = new_version, args = [], overwrite = true
              }
              -- Update registry
              info "updating registry"
              db:remove name
              db:add modentry
              db:update
            else write_to stdout "\e[2K\r"
        else
          let name::args = args
          let db = load_db_from default_db_path
          if let `some {repository, version} = db:get_module_opt name then
            if let {new_version} = check_update {
              name, local_version = version, repo_url = repository
            } then
              -- Install
              let db = load_db_from default_db_path
              let modentry = install {
                db, args,
                repo_url = repository,
                version = new_version,
                overwrite = true
              }
              -- Update registry
              info "updating registry"
              db:remove name
              db:add modentry
              db:update
            else
              info "already using the latest version of '{name}'"
          else
            fatal_error "no such module, '{name}'"
    },
  ]

let find_command_opt name =
  find_opt ({ keys } -> member? name keys) commands

let main! =
  if let `some { handle } = find_command_opt cmd then
    handle command_line
  else
    error "undefined command: '{cmd}'"

    let possible_commands = flat_map ({ keys } -> keys) commands
    let cands =
      possible_commands
      |> rev_map $ str -> (str, fuzzy_cmp str cmd)
      |> sort $ (_, a) (_, b) -> a < b
    info "did you mean '\e[1m{first (car cands)}\e[22m'?"

    info "see `{basename dopepath} help` for avaliable commands"
    exit 1

try main! with _ -> exit 1

