
let fac =
  let rec loop x acc =
    if x == 0 then acc
    else loop (x - 1) (acc * x)
  in fn x -> loop x 1
in

print (1, 2, 3);

let l = 1::2::3::nil in
print ("l:", l);
print ("rev_append l 42:", rev_append l 42);
print ("map l (* 2):", map (fn x -> x * 2) l);

let rec even x =
  x == 0 || odd (x - 1)
and odd x =
  x /= 0 && even (x - 1)
in

print ("even 42:", even 42);
print ("even 13:", even 31);

print ("-1 ashl 2:", -1 ashl 2);
print (not 1);
print (not false);

print ("test hex:", 1 lshl 1 lxor 0x02);

let l = 1::2::3::nil in
print $ 2.3 mod 1;
print $ map (fn f -> f 2) $ map (mod) l;

print ("++:", "Hello" ++ " " ++ "World!");

print ("list:", [1,2,3,4,5,"fasdf",nil]);

try raise Test_error;
with e1 -> (
  print ("handle first error:", e1);
  try raise Second_error;
  with Second_error -> print ("handle second error:", e1);
  print "done with errors";
) or print "I failed =(";

let t = (A, B, C, D) in
print ("4-tuple:", t);
let (_, b, _, d) = t in
print ("b:", b);
print ("d:", d);

#try
  #let a = to_number $ input "Enter a: " in
  #let b = to_number $ input "Enter b: " in
  #let name = input "Enter your name: " in
  #print (name ++ ", a + b = ", a + b);
#with End_of_file ->
  #print "Oh, fuck you, bastard.";


print ("test tuple:", tuple? (A,B), tuple? ());

print ("test list:", list (A,B,C,D,E,F,G), list [1,2,3]);


let r = { name = "Ivan", email = "gamil.com", id = "pidhii" } in
print ("record:", r);
let { name = nam } = r in
print ("name:", nam);
print ("list record:", list r);

let head x::_ = x in
print ("head:", head [A,B,C,D,E]);

print ("match NIL:", if let _::nil = id [1] then true else false);

print ("range:", [1..10]);
print ("flat-map:", [[1..3], [4..6], [7..9]] |> flatten);
try
  print ("flat-map:",
    fold_left (+) 0 $ flatten $ [[1..100], [101..1000], [1001..200000], [1]]);
with Stack_overflow -> print "no-no-no";

print ("list-comprehension:", [x + x | x <- [1..3], odd? x]);

print ("partition:", partition even? [0..9]);

print ("format:", format "~d + ~d = ~d" 1 2 (1+2));

newline!;
print "--- test string";
let str = "abCdefg" in
print ("  str:", str);
print ("  list:", list str);
print ("  concat:", concat $ list str);
print ("  strlen:", strlen str);
print ("  to_upper:", to_upper str);
print ("  to_lower:", to_lower str);
print ("  str[case]cmp:", strcmp str str, strcmp str (to_upper str),
  strcasecmp str (to_upper str));
print ("  chr 0x61:", chr 0x61);


print ("eq:",
  [42, "string", Symbol, {name="Smoorf",color=Blue}, (0xFF,0x00,0x10)]
                            eq
  [42, "string", Symbol, {name="Smoorf",color=Blue}, (0xFF,0x00,0x10)]);


let elf? x =
  let file =
    if file? x then x else
    if string? x then open_in x else
    raise Invalid_argument
  in
  let oldpos = tell file in
  seek file (Set::0);
  let hdr = read_of file 4 in
  seek file (Set::oldpos);
  hdr eq "\x7fELF";
in

let path = "Debug/install/bin/ether" in
printf "elf? ~w: ~w\n" path (elf? path);

let path = "out.txt" in
let file = open_out path in
write_to file "Hello there!";
close file;
print ("out.txt:", read_file $ open_in path);
system "rm -v ~d" path ;


(
  let list? x = x is nil || pair? x in

  let (+) x y =
    if number? x && number? y then x + y
    else if list? x && list? y then zip (+) x y
    else raise Type_error
  in

  let l1 = [1,2,3] in
  let l2 = [0,2,4] in
  let l3 = l1 + l2 in
  print ("l1:", l1);
  print ("l2:", l2);
  print ("l3:", l3);
);

print ("argv:", concat_with ", " command_line);

13;
