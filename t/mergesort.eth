
let split =
  let rec loop slow fast acc =
    if let _::_::fast = fast then
      let x::slow = slow in
      loop slow fast (x::acc)
    else (acc, slow)
  in fn xs -> loop xs xs nil
in

-- Merge two sorted lists preserving order.
let merge =
  let rec loop xs ys acc =
    if let x::xs' = xs then
      if let y::ys' = ys then
        -- Take the smallest of x and y
        if x < y
        then loop xs' ys  (x::acc)
        else loop xs  ys' (y::acc)
      else
        -- No more ys left, append all remaining xs to the result
        List.rev_append acc xs
    else
      -- No more xs left, append all remaining ys to the result
      List.rev_append acc ys
  in fn xs ys -> loop xs ys nil
in

-- Sort a list of numbers in increasing order.
let rec sort xs =
  if let _::_::_ = xs then
    -- Split xs by halves
    let (l, r) = split xs in
    -- Sort each of the halves and merge them back
    merge (sort l) (sort r)
  else xs
in


let read_list file =
  let read_line_opt file =
    try Some (read_line_of file)
    with End_of_file -> false
  in
  let rec loop acc =
    if let Some x = read_line_opt file then
      loop (String.(to_number $ chomp x) :: acc)
    else acc
  in loop nil
in

let l = List.rev $ read_list $ open_in "t/list.txt" in
print ("Given list:", List.take 10 l);
[1..10] |> List.iter (fn _ ->
  print ("Sorted list:", List.take 10 $ sort l)
);

