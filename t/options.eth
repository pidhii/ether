import Options in

let test =
  let do_test name thunk =
    printf "- ~d " name;
    try
      if thunk! then (
        printf "\x1b[38;5;2;1m✓\x1b[0m\n";
        true;
      ) else (
        printf "\x1b[38;5;1;1m✗\x1b[0m\n";
        false;
      )
    with e -> (
      printf "\x1b[38;5;1;1m✗ (~w)\x1b[0m\n" e;
      false;
    )
  in

  let rec loop xs nok nfail =
    if let (name, thunk) :: xs = xs then
      if do_test name thunk
      then loop xs (nok + 1) nfail
      else loop xs nok (nfail + 1)
    else (nok, nfail)
  in

  fn tests -> loop tests 0 0
in


let options = [
  {name = "long-arg", val = "long-arg", has_arg = true},
  {name = "long-no-arg", val = "long-no-arg", has_arg = false},
  {name = "a", val = "short-arg", has_arg = true},
  {name = "f", val = "short-no-arg", has_arg = false}
]
in

let tests = [
  (* test-1 *)
  let cmd =
    ["first","--long-arg","arg","second","--long-no-arg","-a","1","-f","third"]
  in
  let (kw, pos) = Options.get options cmd in
  ("test-1", fn -> all? id [
      pos eq ["first", "second", "third"],
      assoc "long-arg" kw eq Some "arg",
      assoc "long-no-arg" kw eq Some true,
      assoc "short-arg" kw eq Some "1",
      assoc "short-no-arg" kw eq Some true,
    ]),

  (* test-2 *)
  let cmd =
    ["first","--long-arg=arg","second","--long-no-arg","-a1","-f","third"]
  in
  let (kw, pos) = Options.get options cmd in
  ("test-2", fn -> all? id [
      pos eq ["first", "second", "third"],
      assoc "long-arg" kw eq Some "arg",
      assoc "long-no-arg" kw eq Some true,
      assoc "short-arg" kw eq Some "1",
      assoc "short-no-arg" kw eq Some true,
    ]),

  (* test-3 *)
  let cmd = ["--long-arg="] in
  let (kw, pos) = Options.get options cmd in
  ("test-3", fn -> assoc "long-arg" kw eq Some ""),

  (* test-4 *)
  let cmd = ["--long-arg"] in
  ("test-4", fn ->
    try Options.get options cmd; false
    with e -> e eq Missing_argument),

  (* test-5 *)
  let cmd = ["-a"] in
  ("test-5", fn ->
    try Options.get options cmd; false
    with e -> e eq Missing_argument),

  (* test-6 *)
  let cmd = ["--long-no-arg=x"] in
  ("test-6", fn ->
    try Options.get options cmd; false
    with e -> e eq Unexpected_argument),

  (* test-7 *)
  let cmd = ["-fx"] in
  ("test-7", fn ->
    try Options.get options cmd; false
    with e -> e eq Unexpected_argument),

  (* test-8 *)
  let cmd = ["-o"] in
  ("test-8", fn ->
    try Options.get options cmd; false
    with e -> e eq Undefined_option),

]
in

let sumres (nok, nfail) (nok', nfail') =
  (nok + nok', nfail + nfail')
in
let res = (0, 0) in

newline!;
let res = sumres res $ test tests in

newline!;
let (nok, nfail) = res in
printf "\x1b[1mSummary\x1b[0m\n";
printf "- succeed: \x1b[38;5;2;1m~d\x1b[0m\n" nok;
printf "- failed: \x1b[38;5;1;1m~d\x1b[0m\n" nfail;

newline!;

exit 1 when nfail > 0;

()

