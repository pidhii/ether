
let rec fn revAppend xs acc =
  if let x::xs = xs then
    revAppend xs (x :: acc)
  else acc
in

let fn reverse xs = revAppend xs nil in

let fn revMap f xs =
  let rec fn loop xs acc =
    if let x::xs = xs then
      loop xs (f x :: acc)
    else acc
  in loop xs nil
in

let fn map f xs = reverse $ revMap f xs in

let fn revFilter f xs =
  let rec fn loop xs acc =
    if let x::xs = xs then
      loop xs (if f x then x :: acc else acc)
    else acc
  in loop xs nil
in

let fn filter f xs = reverse $ revFilter f xs in

let rec fn foldLeft f z xs =
  if let x :: xs = xs then
    foldLeft f (f z x) xs
  else z
in

let fn range from to =
  let rec fn loop i acc =
    if i < from then acc
    else loop (i - 1) (i :: acc)
  in loop (to - 1) nil
in

let fn even x = x mod 2 == 0 in
let fn odd  x = x mod 2 != 0 in

let rec fn doTimes n thunk =
  if n == 0 then nil
  else (thunk nil; doTimes (n - 1) thunk)
in


let n = 1_00_000 in

let job_user_nobrain =
  fn _ ->
    range 0 n | map (fn x -> x + 1) | filter even? | foldLeft (+) 0
in

let job_user_smart =
  fn _ ->
    range 0 n | revMap (fn x -> x + 1) | revFilter even? | foldLeft (+) 0
in

let job_native =
  let {*} = import 'list' in
  fn _ ->
    range 0 n --(0..n)
    | rev_filter_map (fn x -> if odd? x then some (x + 1))
    | fold_left (+) 0
in


--let job = job_user_nobrain in
let job = job_user_smart in
--let job = job_native in

print $ job nil;
doTimes 10 job

