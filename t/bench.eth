
let rec revAppend xs acc =
  if let x::xs = xs then
    revAppend xs (x :: acc)
  else acc

let reverse xs = revAppend xs nil

let revMap f xs =
  let rec loop xs acc =
    if let x::xs = xs then
      loop xs (f x :: acc)
    else acc
  loop xs nil

let map f xs = reverse $ revMap f xs

let revFilter f xs =
  let rec loop xs acc =
    if let x::xs = xs then
      loop xs (if f x then x :: acc else acc)
    else acc
  loop xs nil

let filter f xs = reverse $ revFilter f xs

let rec foldLeft f z xs =
  if let x :: xs = xs then
    foldLeft f (f z x) xs
  else z

let range from to =
  let rec loop i acc =
    if i < from then acc
    else loop (i - 1) (i :: acc)
  loop (to - 1) nil

let even x = x mod 2 == 0
let odd  x = x mod 2 /= 0

let rec doTimes n thunk =
  if n == 0 then nil
  else (thunk nil; doTimes (n - 1) thunk)


let n = 5_000_000

let job_user_nobrain =
  fn _ ->
    range 0 n | map (x -> x + 1) | filter even? | foldLeft (+) 0

let job_user_smart =
  fn _ ->
    range 0 n | revMap (x -> x + 1) | revFilter even? | foldLeft (+) 0

let job_native =
  open 'list'
  fn _ ->
    fold_left (+) 0 [x + 1 with x <- [0 .. n-1], odd? x]
    --[0..n-1]
    --|> rev_filter_map (x -> x + 1 if odd? x else raise `filter_out)
    --|> fold_left (+) 0


--let job = job_user_nobrain
let job = job_user_smart
--let job = job_native

print $ job ()
doTimes 1 job

