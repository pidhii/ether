
let rec revAppend xs acc =
  if let x::xs = xs then
    revAppend xs (x :: acc)
  else acc

let reverse xs = revAppend xs nil

let revMap f xs =
  let rec loop xs acc =
    if let x::xs = xs then
      loop xs (f x :: acc)
    else acc
  loop xs nil

let map f xs = reverse $ revMap f xs

let rec map' f xs =
  if let x::xs = xs then
    f x :: map' f xs
  else nil

--let revFilterMap f xs =
  --let rec loop xs acc =
    --if let x::xs = xs then
      --loop xs $ try (f x :: acc) with FilterOut -> acc
    --else acc
  --loop xs nil

--let filterMap f xs = reverse $ revFilterMap f xs
let revFilter f xs =
  let rec loop xs acc =
    if let x::xs = xs then
      loop xs (if f x then x :: acc else acc)
    else acc
  loop xs nil

let filter f xs = reverse $ revFilter f xs

let rec filter' f xs =
  if let x::xs = xs then
    if f x then
      x :: filter' f xs
    else filter' f xs
  else nil

let foldLeft f acc xs =
  let rec loop xs acc =
    if let x::xs = xs then
      loop xs (f acc x)
    else acc
  loop xs acc

let range from to =
  let rec loop i acc =
    if i < from then acc
    else loop (i - 1) (i :: acc)
  loop (to - 1) nil
--let range from to = [from .. to - 1]

--let rec even x =
  --x == 0 || odd (x - 1)
--and odd x =
  --x /= 0 && even (x - 1)

let even x = x mod 2 == 0
let odd  x = x mod 2 /= 0

let rec doTimes n thunk =
  if n == 0 then nil
  else (thunk nil; doTimes (n - 1) thunk)

let n = 10000

let job1l _ =
  List.(fold_left (+) 0 $ filter odd $ map (x -> x + 1) $ [0..n-1])

let job1 _ =
  foldLeft (+) 0 $ filter odd $ map (fn x -> x + 1) $ range 0 n

let job1' _ =
  foldLeft (+) 0 $ filter' odd $ map' (fn x -> x + 1) $ range 0 n

let job2 _ =
  foldLeft (+) 0 $ revFilter odd $ revMap (fn x -> x + 1) $ range 0 n

let job2l _ =
  List.(fold_left (+) 0 $ rev_filter odd $ rev_map (x -> x + 1) [0..n-1])


--let job3 _ =
  --range 0 n
  --|> filterMap (fn x -> if odd x then x + 1 else raise FilterOut)
  --|> foldLeft (+) 0

--let job4 _ =
  --range 0 n
  --|> revFilterMap (fn x -> if odd x then x + 1 else raise FilterOut)
  --|> foldLeft (+) 0

let job_iter _ =
  Iter.(fold_left (+) 0 $ filter odd $ map (fn x -> x + 1) $ range 0 n)

let job_seq _ =
  Seq.(fold_left (+) 0 $ filter odd $ map (fn x -> x + 1) $ range 0 n)

let l = [0 .. n-1]
let job_native _ =
  --List.fold_left (+) 0 [x + 1 | x <- l, even? x]
  List.fold_left (+) 0 [x + 1 | x <- [0 .. n-1], even? x]

let job = job1l
--let job = job1
--let job = job1'
let job = job2
let job = job2l
--let job = job_iter
--let job = job_seq
--let job = job_native
print $ job ()
doTimes 700 job

