
let math_tests = open Math in
  [
    ("even?", fn -> even? 0 && even? 2 && not even? 3),
    ("odd?", fn -> not odd? 0 && odd? 1 && not odd? 2 && odd? 3),
    ("min", fn -> min 1 2 == 1),
    ("max", fn -> max 1 2 == 2),
    ("minmax", fn -> minmax 2 1 eq (1, 2)),
  ]
in

let string_tests =
  open String in
  [
    ("cat", fn -> cat ["a", "b", "c"] eq "abc"),
    ("join", fn -> join "," ["a", "b", "c"] eq "a,b,c"),
    ("chr", fn -> chr 0x61 eq "a"),
    ("ord", fn -> ord "a" eq 0x61),
    ("len", fn -> len "1234" == 4),
    ("to_upper", fn -> to_upper "AbcD" eq "ABCD"),
    ("to_lower", fn -> to_lower "AbcD" eq "abcd"),
    ("chomp", fn -> chomp "asd\n\n" eq "asd" && chomp "asd" eq "asd"),
    ("chop", fn -> chop "asd" eq "as" && chop "" eq ""),
    ("strcmp", fn -> cmp "asdf" "asdf" == 0),
    ("strcasecmp", fn -> casecmp "asdf" "ASdF" == 0),
    ("substr", fn ->
      let str = "Hello World!" in
      List.all? id [
        sub str 0 4 eq "Hell",
        sub str (6...) eq "World!",
        sub str (...4) eq "Hello",
        sub str (4..6) eq "o W"]),
    ("find", fn ->
      find "45" "123456" eq Some 3 && find \[3-6]/ "123456" eq Some 2),
    ("match", fn -> match \[^^]\K(\w+)\s+(\w)/ "a bu c" eq ["bu c", "bu", "c"]),
    ("gsub", fn -> gsub \\s+/ (const "-") "a   s f  f f   " eq "a-s-f-f-f-"),
    ("split", fn -> split \\s+/ "asd asdf asdf " eq ["asd", "asdf", "asdf", ""]),
  ]
in

let regexp_tests = [
  ("=~", fn -> "as foo so do bar" =~ \foo/),
]
in

let list_tests =
  open List in
  [ ("[..]", fn -> [1..10] eq [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  , ("[.|.,.]", fn -> [x | x <- [1..10], even? x] eq [2, 4, 6, 8, 10])
  , ("init", fn -> init 3 id eq [0, 1, 2])
  , ("unfold_left", fn -> unfold_left (fn i -> (i+1, i) when i < 3) 1 eq [2, 1])
  , ("unfold_right", fn -> unfold_right (fn i -> (i, i+1) when i < 3) 1 eq [1, 2])
  , ("range", fn -> range (0..9) eq [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  , ("linspace", fn -> linspace 1 10 10 eq [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  , ("rev_append", fn -> rev_append [A, B, C] D eq C::B::A::D)
  , ("rev", fn -> rev [A, B, C] eq [C, B, A])
  , ("append", fn -> append [A, B, C] D eq A::B::C::D)
  , ("flatten", fn -> flatten [[A, B], [C, D], [E, F]] eq [A, B, C, D, E, F])
  , ("len", fn -> len [1, 2, 3, 4, 5] == 5 && len [] == 0)
  , ("rev_map", fn -> rev_map ((+) 1) [1, 2, 3] eq [4, 3, 2])
  , ("map", fn -> map ((+) 1) [1, 2, 3] eq [2, 3, 4])
  , ("rev_mapi", fn -> rev_mapi (+) [1, 2, 3] eq [5, 3, 1])
  , ("mapi", fn -> mapi (+) [1, 2, 3] eq [1, 3, 5])
  , ("rev_zip", fn -> rev_zip (-) [1, 2, 3] [2, 1, 0] eq [3, 1, -1])
  , ("zip", fn -> zip (-) [1, 2, 3] [2, 1, 0] eq [-1, 1, 3])
  , ("rev_zipi", fn ->
      rev_zipi (fn i x y -> i + x - y) [1, 2, 3] [2, 1, 0] eq [5, 2, -1])
  , ("zipi", fn -> zipi (fn i x y -> i + x - y) [1, 2, 3] [2, 1, 0] eq [-1, 2, 5])
  , ("rev_flat_map", fn -> rev_flat_map (fn x -> [1..x-1]) [1, 2, 3] eq [2, 1, 1])
  , ("flat_map", fn -> flat_map (fn x -> [1..x-1]) [1, 2, 3] eq [1, 1, 2])
  , ("rev_filter_map", fn ->
      let f x = x + x if even? x else raise Filter_out in
      rev_filter_map f [1, 2, 3, 4] eq [8, 4])
  , ("filter_map", fn ->
      let f x = x + x if even? x else raise Filter_out in
      filter_map f [1, 2, 3, 4] eq [4, 8])
  , ("fold_left", fn -> fold_left (-) 0 [1, 2, 3] == -6)
  , ("fold_right", fn -> fold_right (-) 0 [1, 2, 3] == 2)
  , ("scan_left", fn -> scan_left (-) 0 [1, 2, 3] eq [-1, -3, -6])
  , ("scan_right", fn -> scan_right (-) 0 [1, 2, 3] eq [2, -1, 3])
  , ("rev_take", fn -> rev_take 3 [1, 2, 3, 4, 5] eq [3, 2, 1])
  , ("take", fn -> take 3 [1, 2, 3, 4, 5] eq [1, 2, 3])
  , ("drop", fn -> drop 3 [1, 2, 3, 4, 5] eq [4, 5])
  , ("all?", fn -> all? even? [2, 4, 6] && not all? odd? [1, 8] && all? id [])
  , ("any?", fn -> any? even? [1, 4, 3] && not any? odd? [2, 8] && not any? id [])
  , ("member?", fn -> member? 3 [1, 2, 3, 4] && not member? 3 [1, 2, 4])
  , ("memq?", fn -> memq? C [A, B, C, D] && not memq? C [A, B, D])
  , ("rev_filter", fn -> rev_filter odd? [1, 2, 3] eq [3, 1])
  , ("filter", fn -> filter odd? [1, 2, 3] eq [1, 3])
  , ("remove", fn -> remove even? [1, 2, 3, 4] eq [1, 3, 4])
  , ("insert", fn -> insert (<) 3 [1, 2, 4, 5] eq [1, 2, 3, 4, 5])
  , ("find", fn ->
      let t1 = find even? [1, 2, 3] eq Some 2 in
      let t2 = not find even? [1, 3] in
      t1 && t2)
  , ("partition", fn -> partition odd? [1, 2, 3] eq ([1, 3], [2]))
  , ("merge", fn -> merge (<) [2, 4, 5] [1, 3, 5, 6] eq [1, 2, 3, 4, 5, 5, 6])
  , ("sort", fn -> sort (<) [1, 4, 7, 4, 3, 2, 5] eq [1, 2, 3, 4, 4, 5, 7])
  , ("assoc", fn ->
      let t1 = assoc "b" [("a", 1), ("b", 2), ("c", 3)] eq Some 2 in
      let t2 = not assoc "b" [("a", 1), ("c", 3)] in
      t1 && t2)
  , ("assq", fn ->
      let t1 = assq B [(A, 1), (B, 2), (C, 3)] eq Some 2 in
      let t2 = not assq B [(A, 1), (C, 3)] in
      t1 && t2)
  , ("transpose", fn ->
      let t1 = transpose [[1,2,3],[4,5,6]] eq [[1,4],[2,5],[3,6]]
      and t2 = transpose [[10,11],[20],[],[30,31,32]] eq [[10,20,30],[11,31],[32]]
      in t1 && t2)
  ]
in

let sumres (nok, nfail) (nok', nfail') =
  (nok + nok', nfail + nfail')
in
let res = (0, 0) in

let (nok, nfail) = Test.run [
    ("math", math_tests),
    ("string", string_tests),
    ("regexp", regexp_tests),
    ("list", list_tests),
  ]
in
exit 1 when nfail > 0;

