
let rec pub range from to =
  if from < to then
    from :: (fn -> range (from + 1) to)
  else []

let rec pub map f s =
  if let x :: xs = s then
    f x :: (fn -> map f xs!)
  else []

let rec pub filter f s =
  if let x :: xs = s then
    if f x then x :: (fn -> filter f xs!)
    else filter f xs!
  else []

let rec pub fold_left f z s =
  if let x :: xs = s then
    fold_left f (f z x) xs!
  else z

let rec pub of_list l =
  if let x :: xs = l then
    x :: (fn -> of_list xs)
  else []

let pub cons x s = x :: (fn -> s)

let rec pub to_rev_list s =
  let rec loop s l =
    if let x :: xs = s then
      loop xs! (x :: l)
    else l
  loop s []

let pub to_list s = List.rev (to_rev_list s)

nil
