import 'list'

let pub map f {state, next} =
  { state
  , next = fn i -> when let (x, i) = next i then (f x, i)
  }

let pub take n {state, next} =
  { state = (state, n)
  , next = fn arg ->
      let (i, n) = arg
      when n > 0 then
        try
          let (x, i) = next i
          (x, (i, n - 1))
        with Match_error -> raise `range_error
  }

let pub filter f {state, next} =
  let rec next' i =
    when let (x, i) = next i then
      if f x then (x, i)
      else next' i
  {state, next = next'}

let pub of_list xs =
  { state = xs
  , next = fn xs -> when let x::xs = xs then (x, xs)
  }

let pub to_list {state, next} =
  let rec loop i acc =
    if let (x, i) = next i then
      loop i (x::acc)
    else list.rev acc
  loop state nil

let pub range from to =
  { state = from
  , next = fn i -> when i < to then (i, i + 1)
  }

let pub fold_left f z {state, next} =
  let rec loop i acc =
    if let (x, i) = next i then
      loop i (f acc x)
    else acc
  loop state z


when defined __main then
  let n = 10_000_000
  let job! = range 0 n | map (x -> x + 1) | filter even? | fold_left (+) 0
  print job!
  job!

