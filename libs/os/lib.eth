
let {*} = require 'string' in

--------------------------------------------------------------------------------
-- Functions:
-- * chdir
-- * access
-- * getcwd
-- * realpath
--
-- Values:
-- * f_ok, r_ok, w_ok, x_ok

let pub F_OK = __f_ok in
let pub R_OK = __r_ok in
let pub W_OK = __w_ok in
let pub X_OK = __x_ok in

let pub O_CLOEXEC = __o_cloexec in
let pub O_DIRECT = __o_direct in
let pub O_NONBLOCK = __o_nonblock in

let pub fn chdir dir =
  try __chdir dir
  except errno -> raise $ system_error errno
in

let pub fn access path amode =
  {help|
  = Os.access

  == SYNOPSIS

    access <path> <amode> -> boolean?

  == DESCRIPTION
  The function shall chek the file named by  the  pathname  (possibly  relative)
  _path_ for acessibility according to the bit pattern specified in _amode_.

  The value of _amode_  is either the bitwise-inclusive OR of \`r_ok`, \`w_ok`, \`x_ok` or existence test, \`f_ok`.

  See also man(3) access for complete documentation.
  |help};
  try __access path amode
  except errno -> raise $ system_error errno
in

let pub fn getcwd =
  try __getcwd ()
  except errno -> raise $ system_error errno
in

let pub getenv = __getenv in

let pub fn setenv name value overwrite =
  try __setenv name value overwrite
  except errno -> raise $  system_error errno
in

let pub fn unsetenv name =
  try __unsetenv name
  except errno -> raise $  system_error errno
in

let fn fix_path path =
  if (substr path (0 .. 1) path eq "~/") or false
  then getenv "HOME" ++ substr (1..*) path
  else path
in
let pub fn realpath path =
  try __realpath $ fix_path path
  except errno -> raise $  system_error errno
in

let pub fn mkdtemp temp =
  {help|
  = Os.mkdtemp

  == Synopsis

    mkdtemp <template-string> -> string?

  == DESCRIPTION
  Create temporary directory with name created from _template-string_  and  return
  obtained path.

  ==== ARGUMENTS
  - _emplate-string_: Template path for the directory ending with six 'X' characters.
  |help};
  try __mkdtemp temp
  except errno -> raise $  system_error errno
in

let pub fn fork =
  try __fork ()
  except errno -> raise $ system_error errno
in

let pub fn waitpid pid opts =
  try __waitpid pid opts
  except errno -> raise $ system_error errno
in

let pub fn pipe =
  try __pipe ()
  except errno -> raise $ system_error errno
in

let pub fn pipe2 flags =
  try __pipe2 flags
  except errno -> raise $ system_error errno
in

let pub fn fileno file =
  try __fileno file
  except errno -> raise $ system_error errno
in

nil
