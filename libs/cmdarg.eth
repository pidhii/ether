let {*} = import 'list' in
let {*} = import 'string' in

let pub fn invalid_option_argument x = {invalid_option_argument = x} in

let fn get_options cfg os =
  cfg |> iter (fn opt ->
    if not (opt is of {name, value, has_arg}) then
      raise $ invalid_argument
        "options must be of type \{name, value, has_arg}, got `{opt}`"
  );

  let cfg = cfg |> flat_map $ fn optcfg ->
    if pair? optcfg.name
    then map (fn name -> optcfg with {name}) optcfg.name
    else [optcfg]
  in

  let cfg = cfg |> map $ fn optcfg ->
    if optcfg is of {arg_pat} then optcfg
    else record $ ('arg_pat', /.*/) :: list optcfg
  in

  let fn get_rules opt =
    try find (fn {name} -> name eq opt) cfg
    except `failure -> raise `undefined_option
  in

  let rec fn mainLoop os kws pos =
    if let o::os = os then
      if o eq "--" then (kws, rev_append pos os)
      else if o =~ /^--/ then handle_long_option o os kws pos
      else if o =~ /^-/ then handle_short_option o os kws pos
      else mainLoop os kws (o :: pos)
    else (kws, rev pos)
  and fn handle_long_option o os kws pos =
    if let (brk, _) = strstr "=" o then
      -- Long option with '=' 
      let lopt = substr (2 .. brk-1) o in
      let {has_arg, value, arg_pat} = get_rules lopt in
      if has_arg then
        let arg = substr (brk+1..*) o in
        if arg =~ arg_pat then
          mainLoop os ((value, arg) :: kws) pos
        else raise $ invalid_option_argument lopt
      else raise `unexpected_argument
    else
      let lopt = substr (2..*) o in
      let {has_arg, value, arg_pat} = get_rules lopt in
      if has_arg then
        if let arg::os = os then
          if arg =~ arg_pat then
            mainLoop os ((value, arg) :: kws) pos
          else raise $ invalid_option_argument lopt
        else raise `missing_argument
      else mainLoop os ((value, true) :: kws) pos
  and fn handle_short_option o os kws pos =
    let shopt = substr (1, 1) o in
    let {has_arg, value, arg_pat} = get_rules shopt in
    if strlen o > 2 then
      -- Option and argument are merged 
      if has_arg then
        let arg = substr (2..*) o in
        if arg =~ arg_pat then
          mainLoop os ((value, arg) :: kws) pos
        else raise $ invalid_option_argument shopt
      else raise `unexpected_argument
    else
      if has_arg then
        if let arg::os = os then
          if arg =~ arg_pat then
            mainLoop os ((value, arg) :: kws) pos
          else raise invalid_option_argument shopt
        else raise `missing_argument
      else mainLoop os ((value, true) :: kws) pos
  in
  mainLoop os [] []
in

let pub get =
  {help|
  = CmdArg.get

  == DESCRIPTION
  Parse command line arguments in GNU style. Both short and long formats are available.

  == SYNOPSIS

    get <list-of-options> <list-of-arguments> -> (opts, non-opt-args)

  === ARGUMENTS
  * _list-of-options_ is a list of configurations for expected argumets of the form 

      \{name = string?, value = <any-tag>, has_arg = boolean?}

  * _list-of-arguments_ is a list of strings to be parsed (to parse command-line
    arguments passed to your script use \`cdr command_line`.
  |help};
  get_options
in

nil
