let pub __builtin fn (+) x y = x + y in
let pub __builtin fn (-) x y = x - y in
let pub __builtin fn (*) x y = x * y in
let pub __builtin fn (/) x y = x / y in
let pub __builtin fn (mod) x y = x mod y in
let pub __builtin fn (^) x y = x ^ y in

let pub __builtin fn (land) x y = x land y in
let pub __builtin fn (lor) x y = x lor y in
let pub __builtin fn (lxor) x y = x lxor y in
let pub __builtin fn (lshl) x y = x lshl y in
let pub __builtin fn (lshr) x y = x lshr y in
let pub __builtin fn (ashl) x y = x ashl y in
let pub __builtin fn (ashr) x y = x ashr y in
let pub __builtin fn (lnot) x = lnot x in

let pub __builtin fn (<) x y = x < y in
let pub __builtin fn (>) x y = x > y in
let pub __builtin fn (<=) x y = x <= y in
let pub __builtin fn (>=) x y = x >= y in
let pub __builtin fn (==) x y = x == y in
let pub __builtin fn (!=) x y = x != y in

let pub __builtin fn (is) x y = x is y in

let pub fn (++) x y = x ++ y in

let pub __builtin fn (::) x y = x :: y in

let pub fn (,) a b = (a, b) in
let pub fn (,,) a b c = (a, b, c) in
let pub fn (,,,) a b c d = (a, b, c, d) in
let pub fn (,,,,) a b c d e = (a, b, c, d, e) in

let pub __builtin fn (not) x = not x in


--let pub (âˆ˜) f g x = f (g x)

-- Application
let pub fn ($) f x = f x in
let pub fn (|>) x f = f x in

-- Pairs
let pub fn car (x :: _) = x in
let pub fn cdr (_ :: x) = x in

-- Tuples
let pub fn first {_1 = x} = x in
let pub fn second {_2 = x} = x in
let pub fn third {_3 = x} = x in

-- Functions
let pub fn id x = x in

let pub fn flip f x y = f y x in
let pub fn const x = fn _ -> x in
let pub fn curry f = fn x y -> f x y in
let pub fn uncurry f = fn (x, y) -> f x y in

-- Sequences
--let pub index seq idx =
  --if let {__methods={index}} = seq then index seq idx
  --else __index seq idx

-- Math
let pub fn even? x = x mod 2 == 0 in
let pub fn odd? x = x mod 2 == 1 in

let fn compose_va f g =
  let rec fn aux x =
    if function? x then
      fn y -> aux (x y)
    else f x
  in aux g
in

let pub fn die msg =
  __print_to stderr msg;
  exit 1;
in

let pub require = __require in

--let fn load_with_defs defs path = __load path defs in
--let fn load_stream_with_defs defs file = __load_stream file (list defs) in
--let fn load_string_with_defs defs str = __load_stream (__open_string str) (list defs) in
let pub fn load x =
  if record? x then
    fn path -> __load path (list x)
  else __load x []
in
let pub fn load_stream x =
  if record? x then
    fn stream -> __load_stream stream (list x)
  else __load_stream x []
in
let pub fn load_string x =
  if record? x then
    fn str -> __load_stream (__open_string str) (list x)
  else __load_stream (__open_string x) []
in

let pub fn __fmt l =
  let rec fn loop l acc =
    if let x :: xs = l then
      let x = if string? x then x else format "%d" x in
      loop xs (x ++ acc)
    else acc
  in loop l ""
in


let pub record = lazy
  let {strcmp} = require 'string' in
  let {sort, mapi, map} = require 'list' in
  fn pairs ->
    -- sort pairs
    let sortedPairs =
      pairs
      |> mapi (,)
      |> sort (fn ((i, (a, _)) as lhs) ((j, (b, _)) as rhs) ->
        let cmp = strcmp a b in
        if cmp < 0 then true
        else if cmp == 0 then i < j
        else false
      )
      |> map second
     in

    -- remove duplicate keys (leave the latest one) and construct a record
    let rec fn loop l acc =
      if let x :: xs = l then
        if acc is [] then
          -- accumulate first kv-pair
          loop xs [x]
        else if first x eq first (car acc) then
          -- replace previous kv-pair with the current one (collision of keys)
          loop xs (x :: cdr acc)
        else
          -- accumulate kv-pair
          loop xs (x :: acc)
      else
        __record acc
    in loop pairs []
in

--------------------------------------------------------------------------------
--                                   IO
--
-- * open_in
-- * open_out
-- * open_append
-- * open_pipe_in
-- * open_pipe_out
-- * close (C)
--
-- Input:
-- * input (C)
--
-- Output:
-- * print
-- * eprint
--
let pub fn open_in path = __open path "r" in
let pub fn open_out path = __open path "w" in
let pub fn open_append path = __open path "a" in
let pub fn open_pipe_in cmd = __popen cmd "r" in
let pub fn open_pipe_out cmd = __popen cmd "w" in
let pub open_string_in = __open_string in

let pub print_to = __print_to in
let pub print = print_to stdout in
let pub eprint = print_to stderr in

--------------------------------------------------------------------------------
--                                System
let pub system = __system in

--------------------------------------------------------------------------------
--                                Random
let pub rand = __rand in
let pub srand = __srand in

--------------------------------------------------------------------------------
--                                Errors
--
let struct __invalid_argument =
  val what = nil

  impl apply self what = self with {what}

  impl write self os =
    let {fprintf} = require 'io' in
    fprintf os "invalid_argument %w" self.what

  impl display self os =
    let {fprintf} = require 'io' in
    fprintf os "invalid argument: %d" self.what
in
let pub fn invalid_argument what = raise $ __invalid_argument what in

let pub fn failure nil = raise `failure in
let pub fn type_error nil = raise `type_error in



let pub some = enum (nil) in
let pub system_error = enum (nil) in

nil

