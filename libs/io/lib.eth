--------------------------------------------------------------------------------
-- Misc:
-- * fopen
--
-- Input:
-- * read_of (C)
-- * read
-- * read_i8_of (C)
-- * read_i16_of (C)
-- * read_i32_of (C)
-- * read_i64_of (C)
-- * read_u8_of (C)
-- * read_u16_of (C)
-- * read_u32_of (C)
-- * read_u64_of (C)
-- * read_f32_of (C)
-- * read_f64_of (C)
-- * read_line_of (C)
-- * read_line_of_opt
-- * read_line
-- * read_line_opt
-- * read_file (C)
--
-- Output:
-- * print (C)
-- * printf
-- * fprintf
-- * eprintf
-- * write_to (C)
-- * write
-- * write_i8_to (C)
-- * write_i16_to (C)
-- * write_i32_to (C)
-- * write_i64_to (C)
-- * write_u8_to (C)
-- * write_u16_to (C)
-- * write_u32_to (C)
-- * write_u64_to (C)
-- * write_f32_to (C)
-- * write_f64_to (C)
--
-- Miscelenious:
-- * tell (C)
-- * seek (C)
-- * shell
--

let list = require 'list' in
let string = require 'string' in

let pub fopen = __open in

let pub fn read_line = read_line_of stdin in
let pub fn read_line_opt =
  try some (read_line ())
  except `end_of_file -> false
in
let pub fn read_line_of_opt file =
  try some (read_line_of file)
  except `end_of_file -> false
in

let pub read = read_of stdin in
let pub fn read_opt n =
  try some (read n)
  except `end_of_file -> false
in
let pub fn read_of_opt file n =
  try some (read_of file n)
  except `end_of_file -> false
in

let pub printf = __printf stdout in
let pub fn fprintf file = __printf file in
let pub eprintf = __printf stderr in

let pub write = write_to stdout in

let pub seek_set = enum (nil) in
let pub seek_cur = enum (nil) in
let pub seek_end = enum (nil) in
let pub fn seek file pos =
  let (offs, whence) =
    if let seek_set  x = pos then (x, 0)
    else if let seek_cur x = pos then (x, 1)
    else if let seek_end x = pos then (x, 2)
    else invalid_argument nil
  in __seek file offs whence
in

let pub fn shell cmd =
  let pipe = open_pipe_in cmd in
  let rec fn loop acc =
    if let some data = read_of_opt pipe 0x100
    then loop (data :: acc)
    else list.rev acc |> string.strcat |> string.chomp
  in
  let out = loop [] in
  if close pipe == 0 then out
  else failure nil
in

nil
