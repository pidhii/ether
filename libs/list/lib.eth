--------------------------------------------------------------------------------
--                                  List
-- Constructors:
-- * init
-- * unfold_left
-- * unfold_right
-- * range
-- * linspace
--
-- Miscelenious:
-- * rev_append
-- * rev
-- * append
-- * transpose
--
-- Iterators:
-- * rev_map
-- * rev_mapi
-- * rev_map2
-- * rev_zip
-- * map
-- * mapi
-- * map2
-- * zip
-- * iter
-- * iteri
-- * rev_flat_map
-- * flat_map
-- * flatten
-- * rev_filter_map
-- * filter_map
-- * fold_left
-- * fold_right
-- * reduce_left
-- * reduce_righ
-- * scan_left
-- * scan_right
-- * fold_map
-- * fold_zip
--
-- Slicing:
-- * rev_take
-- * take
-- * drop
--
-- Scanning:
-- * all?
-- * any?
-- * member?
-- * memq?
--
-- Searching:
-- * filter
-- * remove
-- * insert
-- * find
-- * find_opt
-- * index
-- * index_opt
-- * maximum (no)
-- * minimum (no)
-- * partition
--
-- Sorting:
-- * merge
-- * sort
--
-- Assosiation lists:
-- * assoc
-- * assq
--
-- Element access:
-- * get
--

let pub rev_append = __rev_append in

let rec pub fn fold_map f z xs =
  if let x :: xs' = xs then
    let (x', z') = f z x in
    x' :: lazy fold_map f z' xs'
  else []
in

let pub fn init n f =
  (fn i acc ->
    if i >= 0 then
      this (i - 1) (f i :: acc)
    else acc
  ) (n - 1) []
in

let pub fn unfold_left f z =
  let rec fn loop z acc =
    if let (z, x) = f z then
      loop z (x :: acc)
    else acc
  in loop z []
in

let rec pub fn unfold_right f z =
  if let (x, z) = f z then
    x :: lazy unfold_right f z
  else []
in

let rec pub fn range rng =
  if let (from .. to) = rng then
    if from <= to then
      from :: lazy range (from+1 .. to)
    else nil
  else if let (from ..*) = rng then
    from :: lazy range (from+1 ..*)
  else if let (*.. to) = rng then
    to :: lazy range (*.. to-1)
  else
    invalid_argument nil
in

let pub fn linspace (from .. to) n =
  let {fma} = import 'math' in
  let dx = (to - from) / (n - 1) in
  unfold_left (fn i -> if i >= 0 then (i - 1, fma dx i from)) (n - 1)
in

let pub fn rev xs = rev_append xs nil in

let rec pub fn append xs ys =
  if let x::xs = xs then
    x :: lazy append xs ys
  else ys
in

let rec pub fn map f xs =
  if let x :: xs = xs then
    f x :: lazy map f xs
  else nil
in

let pub fn mapi f xs =
  let rec fn loop i xs =
    if let x :: xs = xs then
      f i x :: lazy loop (i+1) xs
    else nil
  in loop 0 xs
in

let rec pub fn map2 f xs ys =
  if let (x :: xs, y :: ys) = (xs, ys) then
    f x y :: lazy map2 f xs ys
  else nil
in

let pub rev_zip = __rev_zip in
let pub fn zip f ltup = rev $ rev_zip f ltup in

let pub fold_zip = __fold_zip in

let rec pub fn iter f xs =
  if let x :: xs = xs then (
    f x;
    iter f xs
  )
in

let rec pub fn iteri f xs =
  (fn i xs ->
    if let x::xs = xs then (
      f i x;
      this (i + 1) xs f
    )
  ) 0 xs
in

let rec pub fn flat_map f xs =
  if let x :: xs = xs then
    let ys = f x in
    if pair? ys then
      append ys (lazy flat_map f xs)
    else
      flat_map f xs
  else nil
in

let pub flatten = flat_map id in

let rec pub fn filter_map f xs =
  if let x :: xs = xs then
    if let some y = f x then
      y :: lazy filter_map f xs
    else filter_map f xs
  else nil
in

let rec pub fn fold_left f z xs =
  if let x :: xs = xs then
    fold_left f (f z x) xs
  else z
in

let rec pub fn fold_left2 f z xs ys =
  if let (x :: xs, y :: ys) = (xs, ys) then
    fold_left2 f (f z x y) xs ys
  else z
in

let rec pub fn fold_right f z xs =
  if let x :: xs = xs then
    f x (fold_right f z xs)
  else z
in

let rec pub fn fold_right2 f z xs ys =
  if let x :: xs = xs then
    if let y :: ys = ys then
      f x y (fold_right2 f z xs ys)
    else z
  else z
in

let rec pub fn scan_left f z xs =
  if let x :: xs = xs then
    let z = f z x in
    z :: lazy scan_left f z xs
  else nil
in

let rec pub fn scan_right f z xs =
  if let x::xs = xs then
    if let z::_ as tl = scan_right f z xs then
      f x z :: tl
    else [f x z]
  else nil
in

let rec pub fn take n xs =
  if n > 0 then
    if let x :: xs = xs then
      x :: lazy take (n - 1) xs
    else nil
  else nil
in

let rec pub fn drop n xs =
  if n > 0 then
    if let x :: xs = xs then
      drop (n - 1) xs
    else nil
  else xs
in

let rec pub fn all? p xs =
  if let x::xs = xs then
    p x && all? p xs
  else true
in

let rec pub fn any? p xs =
  if let x::xs = xs then
    p x || any? p xs
  else false
in

let rec pub fn member? a xs =
  if let x::xs = xs then
    x eq a || member? a xs
  else false
in

let rec pub fn memq? a xs =
  if let x::xs = xs then
    x is a || memq? a xs
  else false
in

let rec pub fn filter f xs =
  if let x :: xs = xs then
    if f x then
      x :: lazy filter f xs
    else
      filter f xs
  else nil
in

let rec pub fn remove f xs =
  if let x :: xs = xs then
    if f x then xs
    else x :: lazy remove f xs
  else []
in

let rec pub fn insert cmp x ys =
  if let y :: ys' = ys then
    if cmp x y then x :: ys
    else y :: lazy insert cmp x ys'
  else [x]
in

let rec pub fn find_opt p xs =
  if let x :: xs = xs then
    if p x then some x
    else find_opt p xs
  else false
in

let pub fn find p xs =
  if let some x = find_opt p xs then x
  else failure nil
in

let pub fn index_opt p xs =
  (fn i xs ->
    if let x::xs = xs then
      if p x then some i
      else this (i+1) xs
    else false
  ) 0 xs
in

let pub fn index p xs =
  if let some i = index_opt p xs then i
  else failure nil
in

--let rec pub maximum cmp xs =
  --if let x :: xs = xs then
    --if xs is nil then x
    --else
      --let select x y = if cmp x y then x else y in
      --fold_left select x xs
  --else invalid_argument nil
--in
--let rec pub minimum cmp xs =
  --if let x :: xs = xs then
    --if xs is nil then x
    --else
      --let select x y = if cmp x y then x else y in
      --fold_left select x xs
  --else invalid_argument nil
--in

let pub fn partition p xs =
  (filter p xs, filter (fn x -> not p x) xs)
in

let pub fn merge cmp xs ys =
  (fn xs ys acc ->
    if let x :: xs' = xs then
      if let y :: ys' = ys then
        if cmp x y
        then this xs' ys (x::acc)
        else this xs  ys' (y::acc)
      else rev_append acc xs
    else rev_append acc ys
  ) xs ys []
in

let split_by_half =
  let rec fn loop slow fast acc =
    if let _::_::fast = fast then
      let x::slow = slow in
      loop slow fast (x::acc)
    else (acc, slow)
  in fn xs -> loop xs xs []
in

let rec pub fn sort cmp xs =
  if let _::_::_ = xs then
    let (l, r) = split_by_half xs in
    merge cmp (sort cmp l) (sort cmp r)
  else xs
in

let rec pub fn assoc_opt x l =
  if let kv::l = l then
    if let (k, v) = kv then
      if k eq x then some v
      else assoc_opt x l
    else invalid_argument nil
  else false
in

let pub fn assoc k l =
  if let some v = assoc_opt k l then v
  else failure nil
in

let rec pub fn assq_opt x l =
  if let kv::l = l then
    if let (k, v) = kv then
      if k is x then some v
      else assq_opt x l
    else invalid_argument nil
  else false
in

let pub fn assq k l =
  if let some v = assq_opt k l then v
  else failure nil
in

-- TODO: tail recursive
let rec pub fn transpose xs =
  if let xs :: xss = xs then
    if let x :: xs = xs then
      let fn f l = if let hd :: _ = l then some hd in
      let head = x :: (list $ filter_map f xss) in
      let fn f l = if let _ :: tl = l then some tl in
      let tail = transpose (xs :: (list $ filter_map f xss)) in
      head :: tail
    else transpose xss
  else []
in

let pub fn get l k = car $ drop k l in

let pub list = list in -- not to hide the builtin `list` by module name

nil
