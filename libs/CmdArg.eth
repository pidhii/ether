
let get_options cfg os =

  let get_rules opt =
    try List.find (fn {name} -> name eq opt) cfg
    with Failure -> raise Undefined_option
  in

  let rec loop os kws pos =
    if let o::os = os then
      if o eq "--" then (kws, List.rev_append pos os)
      else if String.match \^--/ o then handle_long_option o os kws pos
      else if String.match \^-/ o then handle_short_option o os kws pos
      else loop os kws (o :: pos)
    else (kws, List.rev pos)

  and handle_long_option o os kws pos =
    if let (brk, _) = String.find "=" o then
      -- Long option with '=' 
      let lopt = String.sub (2 .. brk-1) o in
      let {has_arg, val} = get_rules lopt in
      if has_arg then
        let arg = String.sub (brk + 1 ...) o in
        loop os ((val, arg) :: kws) pos
      else raise Unexpected_argument
    else
      let lopt = String.sub (2...) o in
      let {has_arg, val} = get_rules lopt in
      if has_arg then
        if let arg::os = os then
          loop os ((val, arg) :: kws) pos
        else raise Missing_argument
      else loop os ((val, true) :: kws) pos

  and handle_short_option o os kws pos =
    let shopt = String.sub (1..1) o in
    let {has_arg, val} = get_rules shopt in
    if String.len o > 2 then
      -- Option and argument are merged 
      if has_arg then
        let arg = String.sub (2...) o in
        loop os ((val, arg) :: kws) pos
      else raise Unexpected_argument
    else
      if has_arg then
        if let arg::os = os then
          loop os ((val, arg) :: kws) pos
        else raise Missing_argument
      else loop os ((val, true) :: kws) pos
  in

  loop os [] []
in

let pub get =
{.help|
\e[1mDESCRIPTION:\e[0m
  Parse command line arguments in GNU style. Both short and long formats are
  available.

\e[1mUSAGE:\e[0m
  get <list-of-options> <list-of-arguments> -> (opts, non-opt-args)

  where:
  * <list-of-options> is a list of configurations for expected argumets of the
    form 
      \e[4m{name = string?, val = <any-tag>, has_arg = boolean?}\e[0m
  * <list-of-arguments> is a list of strings to be parsed (to parse command-line
    arguments passed to your script use \`cdr command_line\`.
|.help}
  get_options in

()
