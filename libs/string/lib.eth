--------------------------------------------------------------------------------
--                                Strings
-- Constructors:
-- * cat (C)
-- * join
-- * malloc
-- * calloc
-- * make (C)
--
-- Miscelenious:
-- * strlen (C)
-- * to_upper (C)
-- * to_lower (C)
-- * chr (C)
-- * ord (C)
-- * to_number (C)
-- * to_symobl (C)
--
-- Stripping:
-- * chomp (C)
-- * chop (C)
-- * trim_left (C)
-- * trim_right (C)
-- * trim
--
-- Element access (C):
-- * sub
-- * get
--
-- Comparison:
-- * strcmp (C)
-- * strcasecmp (C)
--
-- Searching:
-- * find
--

import 'list';


-- Prelude
let pub cat = __cat in
let pub fn join sep xs =
  if xs is nil then ""
  else if let hd::[] = xs then hd
  else if let hd::tl = xs then
    list.fold_left (fn x y -> cat [x, sep, y]) hd tl
  else invalid_argument nil
in
let pub to_upper = __to_upper in
let pub to_lower = __to_lower in
let pub chr = __chr in
let pub ord = __ord in
let pub to_number = __to_number in
let pub to_symbol = __to_symbol in
let pub chomp = __chomp in
let pub chop = __chop in
let pub trim_left = __trim_left in
let pub trim_right = __trim_right in
let pub fn trim s = trim_left $ trim_right $ s in
let pub strcmp = __strcmp in
let pub strcasecmp = __strcasecmp in
let pub match = __match in
let pub gsub = __gsub in
let pub rev_split = __rev_split in
let pub fn split re str = list.rev $ rev_split re str in

let pub malloc =
  {help|
  = String.malloc
  == DESCRIPTION:
  Create an uninitialized string of given length.\n
  == SYNOPSIS\n
    malloc number? -> string?
  |help};
  __malloc
in

let pub calloc =
  {help|
  = String.calloc
  == DESCRIPTION:
  Create a string of given length initialized with zeros.
  == SYNOPSIS
    calloc number? -> string?
  |help};
  __calloc
in

--------------------------------------------------------------------------------
let pub make_string =
  {help|
  = String.make
  == DESCRIPTION
  Create  a  string of given length filled with a first  character  of  supplied
  string. If it is of zero length, then the it is treated as 0-byte.
  == SYNOPSIS
    make number? string? -> string?
  |help};
  __make
in

let pub strlen = __len in
let pub fn substr x s =
  if let (k, n) = x then __substr s k n
  else if let l .. r = x then __substr s l (r - l + 1)
  else if let l..* = x then __substr s l (strlen s - l)
  else if let *..r = x then __substr s 0 (r + 1)
  else invalid_argument nil
in

--------------------------------------------------------------------------------
--                                Regexp
-- * match (C)
-- * rev_split (C)
-- * split
-- * gsub

let pub fn strstr pat s =
  if regexp? pat then
    __find_regexp pat s
  else if string? pat then
    if let some start = __strstr_opt s pat then
      (start, start + strlen pat)
    else false
  else type_error nil
in

nil
